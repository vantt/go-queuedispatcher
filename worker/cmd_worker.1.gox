package worker

import (
	"time"
	
	cmd "github.com/vantt/go-cmd/cmd"
)

const (
	// Shell will have the command line passed to its `-c` option.
	Shell = "/bin/bash"


	// ttrMargin compensates for beanstalkd's integer precision.
	// e.g. reserving a TTR=1 job will show time-left=0.
	// We need to set our SIGTERM timer to time-left + ttrMargin.
	ttrMargin = 1 * time.Second
) 

type CmdWorker struct {
	shellCmd string
}


func NewCmdWorker1(cmd string) *CmdWorker {
	return &CmdWorker{shellCmd: cmd}
}

func (w *CmdWorker) DoWork(chanRequest *chan TaskRequest) *chan TaskResult {
	responseChan := make(chan *TaskResult)

	go func() {
		for {
			select {
			case req := <-chanRequest:
				responseChan <- w.execJob(req.Job)
			}
		}
	}()

	return responseChan
}

func (w *CmdWorker) execJob(job *queue.Job) *TaskResult {
	result = &TaskResult{JobId:job.ID, Job: job}

	ttr, err := job.TimeLeft()
	
	if err != nil {
		return
	}

	timer := time.NewTimer(ttr + ttrMargin)
	defer timer.Stop()

	opt := cmd.Options{		
		Stdin:     true,
		Buffered:  true,
		Streaming: false,
	},

	process := cmd.NewCmdOptions(opt, Shell, "-C", w.shellCmd)
	statChan := p.Start()

	// send Job info to Command
	process.WriteStdin([]byte(strconv.FormatUint(job.ID, 10) + " "))
	process.WriteStdin([]byte(job.Payload))
	process.CloseStdin()

	// waiting for Comand to process
waitLoop:
	for {
		select {
		case <-tick1:
			process.Stop() 
			result.isTimedOut = true

			break waitLoop

			
		case status := <-statChan:
			result.Error = status.Error
			result.ExitStatus = status.Exit
			result.isFail = (!status.Complete || status.Error != nil || status.Exit > 0)
			result.isExecuted = (status.Complete && status.Error == nil)
			result.isTimedOut = false
			result.Body = status.Stdout

			break waitLoop
		}
	}

	return result
}
